// Code generated by gowrap. DO NOT EDIT.
// template: https://raw.githubusercontent.com/hexdigest/gowrap/bd05dcaf6963696b62ac150a98a59674456c6c53/templates/log
// gowrap: http://github.com/hexdigest/gowrap

package wrappers

//go:generate gowrap gen -p module07/internal/monitors -i Monitor -t https://raw.githubusercontent.com/hexdigest/gowrap/bd05dcaf6963696b62ac150a98a59674456c6c53/templates/log -o monitor_with_log.go -l ""

import (
	"io"
	"log"
	"module07/internal/monitors"
)

// MonitorWithLog implements monitors.Monitor that is instrumented with logging
type MonitorWithLog struct {
	_stdlog, _errlog *log.Logger
	_base            monitors.Monitor
}

// NewMonitorWithLog instruments an implementation of the monitors.Monitor with simple logging
func NewMonitorWithLog(base monitors.Monitor, stdout, stderr io.Writer) MonitorWithLog {
	return MonitorWithLog{
		_base:   base,
		_stdlog: log.New(stdout, "", log.LstdFlags),
		_errlog: log.New(stderr, "", log.LstdFlags),
	}
}

// Run implements monitors.Monitor
func (_d MonitorWithLog) Run() (err error) {
	_d._stdlog.Println("MonitorWithLog: calling Run")
	defer func() {
		_results := []interface{}{"MonitorWithLog: Run returned results:", err}
		if err != nil {
			_d._errlog.Println(_results...)
		} else {
			_d._stdlog.Println(_results...)
		}
	}()
	return _d._base.Run()
}

// Type implements monitors.Monitor
func (_d MonitorWithLog) Type() (s1 string) {
	_d._stdlog.Println("MonitorWithLog: calling Type")
	defer func() {
		_results := []interface{}{"MonitorWithLog: Type returned results:", s1}
		_d._stdlog.Println(_results...)
	}()
	return _d._base.Type()
}
